// API –∏ WebSocket –±–∞–∑–æ–≤—ã–µ URL
if (typeof window.API_BASE_URL === 'undefined') {
  window.API_BASE_URL = "/api";
}
const WS_PROTOCOL = window.location.protocol === "https:" ? "wss" : "ws";
const WS_BASE_URL = `${WS_PROTOCOL}://${window.location.host}${window.API_BASE_URL}`;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tasks = [];
let catalogs = [];
let currentEditingTaskId = null;
let currentCatalogId = null;
let damagedTaskIds = new Set(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª –Ω–∞–Ω–µ—Å–µ–Ω —É—Ä–æ–Ω
let isInitialized = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API
async function fetchCatalogs() {
  try {
    const token = localStorage.getItem("access_token");
    if (!token) {
      console.error("No authentication token found");
      return;
    }

    const response = await fetch(`${window.API_BASE_URL}/catalogs/`, {
      headers: { "Authorization": `Bearer ${token}` }
    });

    if (response.ok) {
      const data = await response.json();
      catalogs = data;
      console.log('Catalogs loaded:', catalogs.length);
      renderCatalogs();
    } else {
      console.error("Failed to fetch catalogs:", response.status);
      await createDefaultCatalog();
    }
  } catch (error) {
    console.error("Error fetching catalogs:", error);
    await createDefaultCatalog();
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
async function createDefaultCatalog() {
  try {
    const token = localStorage.getItem("access_token");
    if (!token) return;

    const response = await fetch(`${window.API_BASE_URL}/catalogs/`, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        name: "–í—Ö–æ–¥—è—â–∏–µ",
        user_id: 0 // –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–∞ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      })
    });

    if (response.ok) {
      const newCatalog = await response.json();
      catalogs = [newCatalog];
      console.log('Default catalog created:', newCatalog);
      renderCatalogs();
    }
  } catch (error) {
    console.error("Error creating default catalog:", error);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
async function fetchCatalogTasks(catalogId) {
  try {
    const token = localStorage.getItem("access_token");
    if (!token) return;

    console.log(`Fetching tasks for catalog ${catalogId}...`);

    const response = await fetch(`${window.API_BASE_URL}/catalogs/${catalogId}/tasks`, {
      headers: { "Authorization": `Bearer ${token}` }
    });

    if (response.ok) {
      const catalogTasks = await response.json();
      console.log(`Raw tasks from API for catalog ${catalogId}:`, catalogTasks);
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
      tasks = tasks.filter(t => t.catalog_id !== catalogId);
      tasks = [...tasks, ...catalogTasks];
      
      console.log(`Tasks loaded for catalog ${catalogId}:`, catalogTasks.length);
      console.log('All tasks after loading:', tasks);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ —Å daily_tasks
      const dailyTasks = catalogTasks.filter(t => t.daily_tasks && t.daily_tasks.length > 0);
      console.log('Daily tasks found:', dailyTasks);
      dailyTasks.forEach(task => {
        console.log(`Daily task "${task.name}" repeats on:`, task.daily_tasks.map(dt => dt.day_week));
      });
      
      renderTasks();
      await checkOverdueCompletedTasks();
    }
  } catch (error) {
    console.error(`Error fetching tasks for catalog ${catalogId}:`, error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤
async function fetchAllTasks() {
  tasks = [];
  for (const catalog of catalogs) {
    await fetchCatalogTasks(catalog.catalog_id);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
async function checkOverdueCompletedTasks() {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  const overdueTasks = tasks.filter(task => {
    if (task.completed !== 'false') return false;
    if (!task.deadline) return false;
    
    const deadlineDate = new Date(task.deadline);
    deadlineDate.setHours(0, 0, 0, 0);
    
    return deadlineDate < today && !damagedTaskIds.has(task.task_id);
  });
  
  if (overdueTasks.length > 0) {
    for (const task of overdueTasks) {
      await applyDamageForTask(task);
    }
    renderTasks();
  }
}

// –ù–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
async function applyDamageForTask(task) {
  try {
    const token = localStorage.getItem("access_token");
    if (!token) return;
    
    let damage = 4; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è 'normal'
    if (task.complexity === 'easy') {
      damage = 3;
    } else if (task.complexity === 'hard') {
      damage = 5;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResponse = await fetch(`${window.API_BASE_URL}/users/me`, {
      headers: { "Authorization": `Bearer ${token}` }
    });
    
    if (!userResponse.ok) {
      console.error(`Failed to get user info: ${userResponse.status}`);
      return;
    }
    
    const userData = await userResponse.json();
    
    if (userData.lives === undefined) {
      console.error("User data doesn't contain lives field");
      return;
    }
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –∂—Ä–µ—Ü–∞
    if (userData.class_id === 4) {
      damage = Math.max(1, damage - 1);
    }

    const currentLives = parseInt(userData.lives);
    const newLives = Math.max(0, currentLives - damage);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updateResponse = await fetch(`${window.API_BASE_URL}/users/me`, {
      method: "PATCH",
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        login: userData.login,
        nickname: userData.nickname,
        user_id: userData.user_id,
        lives: newLives
      })
    });
    
    if (updateResponse.ok) {
      console.log(`Damage applied for task ${task.task_id}: ${damage} lives. Lives: ${currentLives} -> ${newLives}`);
      damagedTaskIds.add(task.task_id);
      await deleteTask(task.task_id);
    } else {
      console.error(`Failed to apply damage for task ${task.task_id}:`, updateResponse.status);
    }
  } catch (error) {
    console.error(`Error applying damage for task ${task.task_id}:`, error);
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –≤ UI
function renderCatalogs() {
  const container = document.getElementById('catalogs-container');
  if (!container) return;
  
  container.innerHTML = '';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ "–ú–æ–π –¥–µ–Ω—å"
  const myDayCatalog = document.createElement('div');
  myDayCatalog.className = 'catalog';
  myDayCatalog.id = 'my-day-catalog';
  myDayCatalog.innerHTML = `
    <div class="catalog-header">
      <h2 class="catalog-title">–ú–æ–π –¥–µ–Ω—å</h2>
      <div class="catalog-actions">
        <!-- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è "–ú–æ–π –¥–µ–Ω—å" -->
      </div>
    </div>
    <div class="catalog-content">
      <ul class="tasks-list" id="tasks-my-day"></ul>
    </div>
  `;
  container.appendChild(myDayCatalog);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  catalogs.forEach(catalog => {
    const catalogElement = document.createElement('div');
    catalogElement.className = 'catalog';
    catalogElement.id = `catalog-${catalog.catalog_id}`;
    
    catalogElement.innerHTML = `
      <div class="catalog-header">
        <h2 class="catalog-title">${catalog.name}</h2>
        <div class="catalog-actions">
          <button class="btn-task add-task-btn" data-catalog="${catalog.catalog_id}">+</button>
          <button class="delete-catalog-btn" data-catalog="${catalog.catalog_id}">üóëÔ∏è</button>
        </div>
      </div>
      <div class="catalog-content">
        <ul class="tasks-list" id="tasks-${catalog.catalog_id}"></ul>
      </div>
    `;
    container.appendChild(catalogElement);
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  setupCatalogEventListeners();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤
  fetchAllTasks();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤
function setupCatalogEventListeners() {
  document.querySelectorAll('.add-task-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      openNewTaskModal(parseInt(this.dataset.catalog));
    });
  });
  
  document.querySelectorAll('.delete-catalog-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.stopPropagation();
      deleteCatalog(parseInt(this.dataset.catalog));
    });
  });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ UI
function renderTasks() {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const todayStr = today.toLocaleDateString('ru-RU');
  
  console.log('=== RENDER TASKS DEBUG ===');
  console.log('Today:', todayStr);
  console.log('Day of week:', today.getDay(), ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'][today.getDay()]);
  console.log('All tasks:', tasks);
  
  // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á
  document.querySelectorAll('.tasks-list').forEach(list => {
    list.innerHTML = '';
  });
  
  // –û—á–∏—â–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  const calendarContent = document.getElementById('calendar-content');
  if (calendarContent) {
    calendarContent.innerHTML = '';
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á
  const catalogTasks = {};
  const todayTasksMap = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const calendarTasks = {};
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
  tasks.forEach(task => {
    console.log('Processing task:', task.name, 'daily_tasks:', task.daily_tasks);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!catalogTasks[task.catalog_id]) {
      catalogTasks[task.catalog_id] = {
        withDate: {},
        withoutDate: []
      };
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
    if (task.deadline) {
      const deadlineDate = new Date(task.deadline);
      deadlineDate.setHours(0, 0, 0, 0);
      const dateStr = deadlineDate.toLocaleDateString('ru-RU');
      
      console.log('Task with deadline:', task.name, 'deadline:', dateStr, 'today:', todayStr);
      
      if (dateStr === todayStr) {
        // –ó–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ "–ú–æ–π –¥–µ–Ω—å"
        todayTasksMap.set(task.task_id, task);
        console.log('Added deadline task to today:', task.name);
      } else {
        // –ó–∞–¥–∞—á–∞ –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        if (!catalogTasks[task.catalog_id].withDate[dateStr]) {
          catalogTasks[task.catalog_id].withDate[dateStr] = [];
        }
        catalogTasks[task.catalog_id].withDate[dateStr].push(task);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        if (!calendarTasks[dateStr]) {
          calendarTasks[dateStr] = [];
        }
        if (!calendarTasks[dateStr].some(t => t.task_id === task.task_id)) {
          calendarTasks[dateStr].push(task);
        }
      }
    } else {
      // –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç—ã –∏–¥—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥
      catalogTasks[task.catalog_id].withoutDate.push(task);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if (task.daily_tasks && task.daily_tasks.length > 0) {
      console.log('Processing daily task:', task.name);
      console.log('Daily tasks config:', task.daily_tasks);
      
      const dayOfWeek = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'][today.getDay()];
      console.log('Current day of week:', dayOfWeek);
      
      const shouldRepeatToday = task.daily_tasks.some(dailyTask => {
        console.log('Checking daily task:', dailyTask.day_week, 'vs', dayOfWeek);
        return dailyTask.day_week === dayOfWeek;
      });
      
      console.log('Should repeat today?', shouldRepeatToday);
      
      if (shouldRepeatToday) {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        const todayTaskInstance = createDailyTaskInstance(task, today);
        todayTasksMap.set(todayTaskInstance.task_id, todayTaskInstance);
        console.log('Added daily task instance to today:', todayTaskInstance.name, todayTaskInstance.task_id);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã (—Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π)
      addDailyTaskToCalendar(task, calendarTasks, today);
    }
  });

  console.log('Today tasks map:', Array.from(todayTasksMap.values()));
  console.log('Calendar tasks:', calendarTasks);
  console.log('=== END RENDER TASKS DEBUG ===');

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–¥–∞—á–∏ "–ú–æ–π –¥–µ–Ω—å"
  renderTodayTasks(Array.from(todayTasksMap.values()));
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö
  renderCatalogTasks(catalogTasks);
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  renderCalendarTasks(calendarTasks);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
function renderTodayTasks(todayTasks) {
  const myDayTasksList = document.getElementById('tasks-my-day');
  if (!myDayTasksList) return;
  
  if (todayTasks.length > 0) {
    const taskGroup = document.createElement('div');
    taskGroup.className = 'task-group';
    myDayTasksList.appendChild(taskGroup);
    
    todayTasks.forEach(task => {
      addTaskToGroup(task, taskGroup);
    });
  } else {
    const noTasksMsg = document.createElement('div');
    noTasksMsg.className = 'no-tasks-message';
    noTasksMsg.textContent = '–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è';
    myDayTasksList.appendChild(noTasksMsg);
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö
function renderCatalogTasks(catalogTasks) {
  for (const catalogId in catalogTasks) {
    const catalogData = catalogTasks[catalogId];
    const tasksList = document.getElementById(`tasks-${catalogId}`);
    
    if (tasksList) {
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –¥–∞—Ç–∞–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
      const sortedDates = Object.keys(catalogData.withDate).sort((a, b) => {
        const [dayA, monthA, yearA] = a.split('.');
        const [dayB, monthB, yearB] = b.split('.');
        const dateA = new Date(yearA, monthA - 1, dayA);
        const dateB = new Date(yearB, monthB - 1, dayB);
        return dateA - dateB;
      });
      
      sortedDates.forEach(dateStr => {
        const dateHeader = document.createElement('div');
        dateHeader.className = 'date-header';
        dateHeader.textContent = dateStr;
        tasksList.appendChild(dateHeader);
        
        const taskGroup = document.createElement('div');
        taskGroup.className = 'task-group';
        tasksList.appendChild(taskGroup);
        
        catalogData.withDate[dateStr].forEach(task => {
          addTaskToGroup(task, taskGroup);
        });
      });
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏)
      const tasksWithoutDate = catalogData.withoutDate.filter(task => {
        // –°–∫—Ä—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        return !(task.daily_tasks && task.daily_tasks.length > 0);
      });
      
      if (tasksWithoutDate.length > 0) {
        const noDateHeader = document.createElement('div');
        noDateHeader.className = 'date-header no-date';
        noDateHeader.textContent = '–ë–µ–∑ –¥–∞—Ç—ã';
        tasksList.appendChild(noDateHeader);
        
        const taskGroup = document.createElement('div');
        taskGroup.className = 'task-group';
        tasksList.appendChild(taskGroup);
        
        tasksWithoutDate.forEach(task => {
          addTaskToGroup(task, taskGroup);
        });
      }
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
function createDailyTaskInstance(originalTask, targetDate) {
  const dateStr = targetDate.toISOString().split('T')[0]; // YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç
  
  return {
    ...originalTask,
    task_id: `${originalTask.task_id}_${dateStr}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    completed: 'false', // –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è
    deadline: null, // –£ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞
    is_daily_instance: true, // –§–ª–∞–≥ —á—Ç–æ —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    original_task_id: originalTask.task_id, // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
    instance_date: dateStr // –î–∞—Ç–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞–Ω —ç—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä
  };
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
function addDailyTaskToCalendar(task, calendarTasks, today) {
  console.log('Adding daily task to calendar:', task.name);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π (–∏—Å–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
  for (let i = 1; i <= 7; i++) {
    const checkDate = new Date(today);
    checkDate.setDate(checkDate.getDate() + i);
    
    const dayOfWeek = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'][checkDate.getDay()];
    const shouldRepeatOnThisDay = task.daily_tasks.some(dailyTask => {
      console.log(`Checking day ${i}: ${dayOfWeek} vs ${dailyTask.day_week}`);
      return dailyTask.day_week === dayOfWeek;
    });
    
    console.log(`Day ${i} (${dayOfWeek}): should repeat = ${shouldRepeatOnThisDay}`);
    
    if (shouldRepeatOnThisDay) {
      const dateStr = checkDate.toLocaleDateString('ru-RU');
      
      if (!calendarTasks[dateStr]) {
        calendarTasks[dateStr] = [];
      }
      
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
      const dailyInstance = createDailyTaskInstance(task, checkDate);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
      if (!calendarTasks[dateStr].some(t => t.task_id === dailyInstance.task_id)) {
        calendarTasks[dateStr].push(dailyInstance);
        console.log(`Added daily instance to calendar for ${dateStr}:`, dailyInstance.name);
      }
    }
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á
function renderCalendarTasks(calendarTasks) {
  const calendarContent = document.getElementById('calendar-content');
  if (!calendarContent) return;
  
  const sortedDates = Object.keys(calendarTasks).sort((a, b) => {
    const [dayA, monthA, yearA] = a.split('.');
    const [dayB, monthB, yearB] = b.split('.');
    const dateA = new Date(yearA, monthA - 1, dayA);
    const dateB = new Date(yearB, monthB - 1, dayB);
    return dateA - dateB;
  });
  
  sortedDates.forEach(date => {
    const dayElement = document.createElement('div');
    dayElement.className = 'calendar-day';
    
    const dateElement = document.createElement('div');
    dateElement.className = 'calendar-date';
    dateElement.textContent = date;
    dayElement.appendChild(dateElement);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const tasksMap = new Map();
    calendarTasks[date].forEach(task => {
      tasksMap.set(task.task_id, task);
    });
    
    Array.from(tasksMap.values()).forEach(task => {
      const taskElement = document.createElement('div');
      taskElement.className = 'task-item';
      taskElement.style.margin = '5px 0';
      
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.className = 'task-checkbox';
      
      // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤—Å–µ–≥–¥–∞ false
      if (task.is_daily_instance) {
        checkbox.checked = false;
      } else {
        checkbox.checked = task.completed === 'true';
      }
      
      checkbox.style.marginRight = '10px';
      
      const taskText = document.createElement('span');
      taskText.className = 'task-text';
      
      // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
      if (task.is_daily_instance) {
        taskText.classList.remove('completed');
      } else {
        if (task.completed === 'true') {
          taskText.classList.add('completed');
        }
      }
      
      taskText.textContent = task.name;
      
      const complexityIndicator = document.createElement('span');
      complexityIndicator.className = `complexity-indicator ${task.complexity}`;
      complexityIndicator.textContent = {
        'easy': '‚ö™',
        'normal': 'üîµ',
        'hard': 'üî¥'
      }[task.complexity] || 'üîµ';
      complexityIndicator.style.marginLeft = '10px';
      
      checkbox.addEventListener('change', function() {
        updateTaskCompletion(task.task_id, this.checked);
      });
      
      taskElement.addEventListener('click', (e) => {
        if (e.target !== checkbox) {
          editTask(task.task_id);
        }
      });
      
      taskElement.appendChild(checkbox);
      taskElement.appendChild(taskText);
      taskElement.appendChild(complexityIndicator);
      dayElement.appendChild(taskElement);
    });
    
    calendarContent.appendChild(dayElement);
  });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –≥—Ä—É–ø–ø—É
function addTaskToGroup(task, taskGroup) {
  const taskItem = document.createElement('div');
  taskItem.className = 'task-item';
  taskItem.dataset.taskId = task.task_id;
  
  const checkbox = document.createElement('input');
  checkbox.type = 'checkbox';
  checkbox.className = 'task-checkbox';
  
  // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å 'false'
  if (task.is_daily_instance) {
    checkbox.checked = false;
  } else {
    checkbox.checked = task.completed === 'true';
  }
  
  const taskText = document.createElement('span');
  taskText.className = 'task-text';
  
  // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  if (task.is_daily_instance) {
    taskText.classList.remove('completed');
  } else {
    if (task.completed === 'true') {
      taskText.classList.add('completed');
    }
  }
  
  taskText.textContent = task.name;
  
  const complexityIndicator = document.createElement('span');
  complexityIndicator.className = `complexity-indicator ${task.complexity}`;
  complexityIndicator.textContent = {
    'easy': '‚ö™',
    'normal': 'üîµ',
    'hard': 'üî¥'
  }[task.complexity] || 'üîµ';
  
  checkbox.addEventListener('change', function() {
    updateTaskCompletion(task.task_id, this.checked);
  });
  
  taskItem.appendChild(checkbox);
  taskItem.appendChild(taskText);
  taskItem.appendChild(complexityIndicator);
  taskGroup.appendChild(taskItem);
  
  taskItem.addEventListener('click', (e) => {
    if (e.target !== checkbox) {
      editTask(task.task_id);
    }
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async function updateTaskCompletion(taskId, completed) {
  try {
    const token = localStorage.getItem("access_token");
    if (!token) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    if (taskId.includes('_')) {
      // –≠—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      console.log(`Daily task instance ${taskId} completion status updated to: ${completed ? 'true' : 'false'}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
      const taskElements = document.querySelectorAll(`[data-task-id="${taskId}"]`);
      taskElements.forEach(element => {
        const checkbox = element.querySelector('.task-checkbox');
        const taskText = element.querySelector('.task-text');
        if (checkbox) checkbox.checked = completed;
        if (taskText) {
          if (completed) {
            taskText.classList.add('completed');
          } else {
            taskText.classList.remove('completed');
          }
        }
      });
      
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
      if (completed) {
        const originalTaskId = taskId.split('_')[0];
        const originalTask = tasks.find(t => t.task_id == originalTaskId);
        if (originalTask) {
          await giveTaskReward(originalTask);
        }
      }
      
      return;
    }

    // –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const response = await fetch(`${window.API_BASE_URL}/tasks/${taskId}/completion`, {
      method: "PATCH",
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        completed: completed ? 'true' : 'false'
      })
    });
    
    if (response.ok) {
      const updatedTask = await response.json();
      const taskIndex = tasks.findIndex(t => t.task_id === taskId);
      if (taskIndex !== -1) {
        tasks[taskIndex].completed = updatedTask.completed;
      }
      console.log(`Task ${taskId} completion status updated to: ${completed ? 'true' : 'false'}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
      const taskElements = document.querySelectorAll(`[data-task-id="${taskId}"]`);
      taskElements.forEach(element => {
        const checkbox = element.querySelector('.task-checkbox');
        const taskText = element.querySelector('.task-text');
        if (checkbox) checkbox.checked = completed;
        if (taskText) {
          if (completed) {
            taskText.classList.add('completed');
          } else {
            taskText.classList.remove('completed');
          }
        }
      });
    } else {
      console.error(`Failed to update task ${taskId} completion status:`, response.status);
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ UI
      rollbackTaskUI(taskId, !completed);
    }
  } catch (error) {
    console.error(`Error updating task ${taskId} completion:`, error);
    rollbackTaskUI(taskId, !completed);
  }
}

// –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function giveTaskReward(task) {
  try {
    const token = localStorage.getItem("access_token");
    if (!token) return;

    const rewards = {
      "easy": [10, 20],
      "normal": [30, 40], 
      "hard": [50, 80]
    };
    
    const [goldReward, expReward] = rewards[task.complexity] || [30, 40];
    
    console.log(`Giving reward for task completion: ${goldReward} gold, ${expReward} exp`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    
  } catch (error) {
    console.error("Error giving task reward:", error);
  }
}

// –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ UI
function rollbackTaskUI(taskId, previousState) {
  const taskElements = document.querySelectorAll(`[data-task-id="${taskId}"]`);
  taskElements.forEach(element => {
    const checkbox = element.querySelector('.task-checkbox');
    const taskText = element.querySelector('.task-text');
    if (checkbox) checkbox.checked = previousState;
    if (taskText) taskText.classList.toggle('completed', previousState);
  });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
function openNewTaskModal(catalogId) {
  currentEditingTaskId = null;
  currentCatalogId = catalogId;
  
  document.getElementById('task-modal-title').textContent = '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞';
  document.getElementById('task-input').value = '';
  document.getElementById('deadline-input').value = '';
  
  // –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  document.querySelectorAll('.complexity-btn').forEach(btn => {
    btn.classList.remove('selected');
  });
  document.querySelector('.complexity-btn[data-complexity="normal"]').classList.add('selected');
  
  // –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π
  document.querySelectorAll('.day-btn').forEach(btn => {
    btn.classList.remove('selected');
  });
  
  document.getElementById('delete-task-btn').style.display = 'none';
  document.getElementById('task-modal').style.display = 'flex';
  document.getElementById('task-input').focus();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async function editTask(taskId) {
  console.log('=== EDIT TASK DEBUG ===');
  console.log('editTask called with taskId:', taskId);
  
  let task;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
  if (taskId.includes('_')) {
    console.log('This is a daily task instance');
    const originalTaskId = taskId.split('_')[0];
    task = tasks.find(t => t.task_id == originalTaskId);
    if (!task) {
      console.error('Original task not found for daily instance');
      return;
    }
    
    // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    alert('–≠—Ç–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫–æ –≤—Å–µ–º –±—É–¥—É—â–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º.');
    currentEditingTaskId = originalTaskId;
  } else {
    console.log('This is a regular task');
    task = tasks.find(t => t.task_id == taskId);
    if (!task) {
      console.error('Task not found:', taskId);
      return;
    }
    currentEditingTaskId = taskId;
  }
  
  console.log('Task found:', task);
  console.log('currentEditingTaskId set to:', currentEditingTaskId);
  
  currentCatalogId = task.catalog_id;
  console.log('currentCatalogId set to:', currentCatalogId);
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
  document.getElementById('task-modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É';
  document.getElementById('task-input').value = task.name;
  document.getElementById('deadline-input').value = task.deadline ? new Date(task.deadline).toISOString().substr(0, 10) : '';
  
  console.log('Form filled with:', {
    name: task.name,
    deadline: task.deadline
  });
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  document.querySelectorAll('.complexity-btn').forEach(btn => {
    btn.classList.remove('selected');
    if (btn.dataset.complexity === (task.complexity || 'normal')) {
      btn.classList.add('selected');
      console.log('Selected complexity:', btn.dataset.complexity);
    }
  });
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–Ω–µ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
  document.querySelectorAll('.day-btn').forEach(btn => {
    btn.classList.remove('selected');
    if (task.daily_tasks && task.daily_tasks.some(dt => dt.day_week === btn.dataset.day)) {
      btn.classList.add('selected');
      console.log('Selected day:', btn.dataset.day);
    }
  });
  
  console.log('Daily tasks:', task.daily_tasks);
  
  document.getElementById('delete-task-btn').style.display = 'block';
  document.getElementById('task-modal').style.display = 'flex';
  document.getElementById('task-input').focus();
  
  console.log('Modal opened');
  console.log('=== END EDIT TASK DEBUG ===');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function saveTask() {
  const name = document.getElementById('task-input').value.trim();
  if (!name) return;
  
  const deadline = document.getElementById('deadline-input').value || null;
  
  const complexityBtn = document.querySelector('.complexity-btn.selected');
  const complexity = complexityBtn ? complexityBtn.dataset.complexity : 'normal';
  
  const repeatDays = Array.from(document.querySelectorAll('.day-btn.selected'))
                      .map(btn => btn.dataset.day);
  
  if (deadline && repeatDays.length > 0) {
    alert('–ù–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!');
    return;
  }
  
  try {
    const token = localStorage.getItem("access_token");
    if (!token) return;
    
    console.log('=== SAVE TASK DEBUG ===');
    console.log('currentEditingTaskId:', currentEditingTaskId);
    console.log('Task data:', { name, complexity, deadline, repeatDays });
    
    if (currentEditingTaskId) {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
      console.log('Updating existing task via PUT...');
      
      const updateData = {
        name: name,
        complexity: complexity,
        deadline: deadline
      };
      
      console.log('Sending PUT request to:', `${window.API_BASE_URL}/tasks/${currentEditingTaskId}`);
      console.log('Update data:', updateData);
      
      const response = await fetch(`${window.API_BASE_URL}/tasks/${currentEditingTaskId}`, {
        method: "PUT",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(updateData)
      });
      
      console.log('PUT response status:', response.status);
      console.log('PUT response ok:', response.ok);
      
      if (response.ok) {
        const updatedTask = await response.json();
        console.log('Task updated successfully:', updatedTask);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
        const taskIndex = tasks.findIndex(t => t.task_id == currentEditingTaskId);
        console.log('Task index in local array:', taskIndex);
        
        if (taskIndex !== -1) {
          console.log('Old task:', tasks[taskIndex]);
          tasks[taskIndex] = { ...tasks[taskIndex], ...updatedTask };
          console.log('New task:', tasks[taskIndex]);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (repeatDays.length > 0) {
          console.log('Updating daily tasks...');
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
          const oldDailyResponse = await fetch(`${window.API_BASE_URL}/tasks/${currentEditingTaskId}/daily-tasks`, {
            headers: { "Authorization": `Bearer ${token}` }
          });
          
          if (oldDailyResponse.ok) {
            const dailyTasksData = await oldDailyResponse.json();
            console.log('Current daily tasks:', dailyTasksData);
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
            for (const dailyTask of dailyTasksData) {
              console.log('Deleting daily task:', dailyTask.daily_task_id);
              const deleteResponse = await fetch(`${window.API_BASE_URL}/daily-tasks/${dailyTask.daily_task_id}`, {
                method: "DELETE",
                headers: { "Authorization": `Bearer ${token}` }
              });
              console.log('Delete daily task response:', deleteResponse.status);
            }
          }
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
          for (const day of repeatDays) {
            console.log('Creating daily task for day:', day);
            const createResponse = await fetch(`${window.API_BASE_URL}/daily-tasks/`, {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                task_id: parseInt(currentEditingTaskId),
                day_week: day
              })
            });
            console.log('Create daily task response:', createResponse.status);
          }
          
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
          console.log('Reloading catalog tasks...');
          await fetchCatalogTasks(currentCatalogId);
        }
      } else {
        const errorText = await response.text();
        console.error('Failed to update task. Status:', response.status);
        console.error('Error response:', errorText);
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${response.status} - ${errorText}`);
        return;
      }
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
      console.log('Creating new task...');
      
      const response = await fetch(`${window.API_BASE_URL}/tasks/`, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          catalog_id: currentCatalogId,
          name: name,
          complexity: complexity,
          deadline: deadline ? new Date(deadline).toISOString().split('T')[0] : null
        })
      });
      
      console.log('POST response status:', response.status);
      
      if (response.ok) {
        const newTask = await response.json();
        tasks.push(newTask);
        console.log('New task created:', newTask);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã
        if (repeatDays.length > 0) {
          for (const day of repeatDays) {
            await fetch(`${window.API_BASE_URL}/daily-tasks/`, {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                task_id: newTask.task_id,
                day_week: day
              })
            });
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å daily_tasks
          await fetchCatalogTasks(currentCatalogId);
        }
      } else {
        const errorText = await response.text();
        console.error('Failed to create task. Status:', response.status);
        console.error('Error response:', errorText);
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ${response.status} - ${errorText}`);
        return;
      }
    }
    
    console.log('=== END SAVE TASK DEBUG ===');
    
    renderTasks();
    document.getElementById('task-modal').style.display = 'none';
  } catch (error) {
    console.error("Error saving task:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function deleteTask(taskId) {
  if (!taskId) taskId = currentEditingTaskId;
  if (!taskId) return;
  
  try {
    const token = localStorage.getItem("access_token");
    if (!token) return;
    
    const response = await fetch(`${window.API_BASE_URL}/tasks/${taskId}`, {
      method: "DELETE",
      headers: { "Authorization": `Bearer ${token}` }
    });
    
    if (response.ok) {
      tasks = tasks.filter(t => t.task_id !== taskId);
      renderTasks();
      if (document.getElementById('task-modal').style.display === 'flex') {
        document.getElementById('task-modal').style.display = 'none';
      }
    }
  } catch (error) {
    console.error("Error deleting task:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
async function createCatalog() {
  const catalogName = document.getElementById('catalog-input').value.trim();
  if (!catalogName) return;
  
  if (catalogs.some(c => c.name === catalogName)) {
    alert('–ö–∞—Ç–∞–ª–æ–≥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    return;
  }
  
  try {
    const token = localStorage.getItem("access_token");
    if (!token) return;
    
    const response = await fetch(`${window.API_BASE_URL}/catalogs/`, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        name: catalogName,
        user_id: 0 // –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–∞ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      })
    });
    
    if (response.ok) {
      const newCatalog = await response.json();
      catalogs.push(newCatalog);
      console.log('New catalog created:', newCatalog);
      renderCatalogs();
      document.getElementById('catalog-modal').style.display = 'none';
      document.getElementById('catalog-input').value = '';
    }
  } catch (error) {
    console.error("Error creating catalog:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
async function deleteCatalog(catalogId) {
  if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—Å–µ –µ–≥–æ –∑–∞–¥–∞—á–∏?")) {
    return;
  }
  
  try {
    const token = localStorage.getItem("access_token");
    if (!token) return;
    
    const response = await fetch(`${window.API_BASE_URL}/catalogs/${catalogId}`, {
      method: "DELETE",
      headers: { "Authorization": `Bearer ${token}` }
    });
    
    if (response.ok) {
      catalogs = catalogs.filter(c => c.catalog_id !== catalogId);
      tasks = tasks.filter(t => t.catalog_id !== catalogId);
      console.log(`Catalog ${catalogId} deleted`);
      renderCatalogs();
    } else {
      console.error("Failed to delete catalog:", response.status);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  } catch (error) {
    console.error("Error deleting catalog:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function setupComplexityButtons() {
  document.querySelectorAll('.complexity-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      document.querySelectorAll('.complexity-btn').forEach(b => b.classList.remove('selected'));
      this.classList.add('selected');
    });
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
function setupDayButtons() {
  document.querySelectorAll('.day-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      this.classList.toggle('selected');
      
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –¥–Ω–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω
      if (document.querySelectorAll('.day-btn.selected').length > 0) {
        document.getElementById('deadline-input').value = '';
      }
    });
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—è –¥–µ–¥–ª–∞–π–Ω–∞
function setupDeadlineInput() {
  document.getElementById('deadline-input')?.addEventListener('change', function() {
    if (this.value) {
      // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ–¥–ª–∞–π–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω–µ–π
      document.querySelectorAll('.day-btn.selected').forEach(btn => {
        btn.classList.remove('selected');
      });
    }
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupMainEventListeners() {
  // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  const addTaskCalendarBtn = document.getElementById('add-task-calendar-btn');
  if (addTaskCalendarBtn) {
    addTaskCalendarBtn.addEventListener('click', () => {
      console.log('–ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" –Ω–∞–∂–∞—Ç–∞');
      
      if (catalogs.length > 0) {
        console.log('–ö–∞—Ç–∞–ª–æ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã:', catalogs);
        openNewTaskModal(catalogs[0].catalog_id);
      } else {
        console.log('–ö–∞—Ç–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—é –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥');
        createDefaultCatalog().then(() => {
          if (catalogs.length > 0) {
            openNewTaskModal(catalogs[0].catalog_id);
          }
        });
      }
    });
  }
  
  // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–¥–∞—á–∏
  const cancelTaskBtn = document.getElementById('cancel-task-btn');
  if (cancelTaskBtn) {
    cancelTaskBtn.addEventListener('click', function() {
      document.getElementById('task-modal').style.display = 'none';
    });
  }
  
  const saveTaskBtn = document.getElementById('save-task-btn');
  if (saveTaskBtn) {
    saveTaskBtn.addEventListener('click', saveTask);
  }
  
  const deleteTaskBtn = document.getElementById('delete-task-btn');
  if (deleteTaskBtn) {
    deleteTaskBtn.addEventListener('click', () => deleteTask());
  }
  
  // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
  const createCatalogBtn = document.getElementById('create-catalog-btn');
  if (createCatalogBtn) {
    createCatalogBtn.addEventListener('click', function() {
      document.getElementById('catalog-modal').style.display = 'flex';
      document.getElementById('catalog-input').focus();
    });
  }
  
  // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è)
  const addCatalogBtn = document.getElementById('add-catalog-btn');
  if (addCatalogBtn) {
    addCatalogBtn.addEventListener('click', function() {
      console.log('–ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥" –Ω–∞–∂–∞—Ç–∞');
      const catalogModal = document.getElementById('catalog-modal');
      console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–∞:', catalogModal);
      catalogModal.style.display = 'flex';
      document.getElementById('catalog-input').focus();
    });
  }
  
  // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
  const cancelCatalogBtn = document.getElementById('cancel-catalog-btn');
  if (cancelCatalogBtn) {
    cancelCatalogBtn.addEventListener('click', function() {
      document.getElementById('catalog-modal').style.display = 'none';
      document.getElementById('catalog-input').value = '';
    });
  }
  
  const saveCatalogBtn = document.getElementById('save-catalog-btn');
  if (saveCatalogBtn) {
    saveCatalogBtn.addEventListener('click', createCatalog);
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
  window.addEventListener('click', function(event) {
    const taskModal = document.getElementById('task-modal');
    const catalogModal = document.getElementById('catalog-modal');
    
    if (event.target === taskModal) {
      taskModal.style.display = 'none';
    }
    
    if (event.target === catalogModal) {
      catalogModal.style.display = 'none';
      document.getElementById('catalog-input').value = '';
    }
  });
  
  // Enter –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
  const taskInput = document.getElementById('task-input');
  if (taskInput) {
    taskInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        saveTask();
      }
    });
  }
  
  const catalogInput = document.getElementById('catalog-input');
  if (catalogInput) {
    catalogInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        createCatalog();
      }
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
  if (isInitialized) {
    console.log('App already initialized');
    return;
  }
  
  console.log('Initializing tasks app...');
  isInitialized = true;
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  setupComplexityButtons();
  setupDayButtons();
  setupDeadlineInput();
  setupMainEventListeners();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  fetchCatalogs();
  
  console.log('Tasks app initialized successfully');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, initializing tasks app...');
  
  // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  setTimeout(() => {
    initializeApp();
  }, 100);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
  console.error('JavaScript error in tasks app:', e.error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', function(e) {
  console.error('Unhandled promise rejection in tasks app:', e.reason);
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
window.tasksApp = {
  fetchCatalogs,
  renderTasks,
  openNewTaskModal,
  saveTask,
  deleteTask,
  createCatalog,
  deleteCatalog
};

console.log('Tasks script loaded successfully');