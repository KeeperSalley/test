# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª backend/setup.py

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ app
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.init_bosses import init_bosses
from app.init_classes import init_classes
from app.init_items import init_items
from app.tasks_init import init_daily_tasks_support, check_daily_tasks_support

def setup_project():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á–∞—Ç–æ–≤
    chat_dir = os.path.join(os.path.dirname(__file__), "app", "chats")
    if not os.path.exists(chat_dir):
        os.makedirs(chat_dir)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —á–∞—Ç–æ–≤: {chat_dir}")
    else:
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —á–∞—Ç–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {chat_dir}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    print("\n=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===")
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –∫–ª–∞—Å—Å—ã (–Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤...")
    init_classes()
    
    # 2. –ó–∞—Ç–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã (–∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–ª–∞—Å—Å–æ–≤)
    print("\n2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    init_items()
    
    # 3. –ü–æ—Ç–æ–º –±–æ—Å—Å—ã (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã)
    print("\n3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Å—Å–æ–≤...")
    init_bosses()
    
    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
    
    try:
        if not check_daily_tasks_support():
            print("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            init_daily_tasks_support()
        else:
            print("‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é:")
        print("""
        ALTER TABLE tasks 
        ADD COLUMN parent_task_id INTEGER REFERENCES tasks(task_id) ON DELETE CASCADE,
        ADD COLUMN is_daily_instance BOOLEAN DEFAULT FALSE,
        ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
        
        CREATE INDEX idx_tasks_parent_task_id ON tasks(parent_task_id);
        CREATE INDEX idx_tasks_is_daily_instance ON tasks(is_daily_instance);
        CREATE INDEX idx_tasks_deadline ON tasks(deadline);
        CREATE INDEX idx_tasks_created_at ON tasks(created_at);
        
        UPDATE tasks SET created_at = CURRENT_TIMESTAMP WHERE created_at IS NULL;
        """)
    
    print("\n=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ===")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("cd backend")
    print("uvicorn app.main:app --reload --host 0.0.0.0 --port 8000")

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app.database import SessionLocal
        db = SessionLocal()
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        db.execute("SELECT 1")
        db.close()
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("1. PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print("2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        print("3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ DATABASE_URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return False

def verify_setup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not check_database_connection():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    try:
        from app.database import SessionLocal
        from sqlalchemy import text
        
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        tables_to_check = ['users', 'tasks', 'catalogs', 'classes', 'items', 'bosses']
        
        for table in tables_to_check:
            result = db.execute(text(f"SELECT COUNT(*) FROM {table}")).fetchone()
            print(f"‚úì –¢–∞–±–ª–∏—Ü–∞ {table}: {result[0]} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        result = db.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'tasks' 
            AND column_name IN ('parent_task_id', 'is_daily_instance', 'created_at')
        """)).fetchall()
        
        if len(result) == 3:
            print("‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        else:
            print("‚ö† –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ")
        
        db.close()
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

if __name__ == "__main__":
    print("=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Gamify Planner ===")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    setup_project()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if verify_setup():
        print("\nüéâ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
    else:
        print("\n‚ö† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.")